# -*- coding: utf-8 -*-
"""Deaths.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hba7x98Iy0YDDHIqS1uQaqCaZn8uh8kO
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import datetime
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import BayesianRidge
from sklearn.svm import SVR
from sklearn import metrics
from sklearn.model_selection import train_test_split

"""**Datasets and Preprocessing**

#### Analysis of Deaths due to COVID-19 in World and India
"""

#Deaths in World and India

world_covid_deaths=pd.read_csv('/content/time_series_covid19_deaths_global1.csv')
world_covid_deaths.drop(columns=['Province/State','Lat','Long'],inplace=True)
India_covid_deaths=world_covid_deaths[world_covid_deaths['Country/Region']=='India']
print(India_covid_deaths)
world_covid_deaths

#columns

cols=world_covid_deaths.keys()
cols=cols[1:]
cols

#Access  Deaths daily in World

world_deaths=[]
cov_deaths=world_covid_deaths.values
for i in range(1,len(cols)+1):
  world_deaths.append(cov_deaths[:,i].sum())
world_deaths=np.array(world_deaths).reshape(-1,1)
world_deaths

#Access  Deaths Daily in India

India_deaths=[]
ind_deaths=world_covid_deaths[world_covid_deaths['Country/Region']=='India'].values
for i in range(1,len(cols)+1):
  India_deaths.append(ind_deaths[:,i].sum())
India_deaths=np.array(India_deaths).reshape(-1,1)
India_deaths

#Days

days = np.array([i for i in range(len(world_deaths))]).reshape(-1, 1)
days

#Converting Dates

dates=pd.to_datetime(cols)
dates

"""**Graph**"""

#Graph for Deaths in World

plt.figure(figsize=(12, 8))
plt.plot(dates,world_deaths)
plt.title('Coronavirus Deaths Over Time in World', size=30)
plt.xlabel('Days Since 1/22/2020', size=20)
plt.ylabel('No.of Deaths', size=20)
plt.xticks(size=15)
plt.show()

#Graph for deaths in India

plt.figure(figsize=(12, 8))
plt.plot(dates,India_deaths)
plt.title('Coronavirus Deaths Over Time in India', size=30)
plt.xlabel('Days Since 1/22/2020', size=20)
plt.ylabel('No.of Deaths', size=20)
plt.xticks(size=15)
plt.show()

"""#Prediction"""

days_in_future = 15
prediction_days = np.array([i for i in range(len(days)+days_in_future)]).reshape(-1, 1)
start = '1/22/2020'
start_date = datetime.datetime.strptime(start, '%m/%d/%Y')
prediction_dates = []
for i in range(len(prediction_days)):
    prediction_dates.append((start_date + datetime.timedelta(days=i)).strftime('%m/%d/%Y'))
prediction_dates

xtrain_world_deaths,xtest_world_deaths,ytrain_world_deaths,ytest_world_deaths=train_test_split(days,world_deaths,test_size=0.35)
xtrain_ind_deaths,xtest_ind_deaths,ytrain_ind_deaths,ytest_ind_deaths=train_test_split(days,India_deaths,test_size=0.35)

#Linear Regression

# World
lmodel_world_deaths=LinearRegression()
lmodel_world_deaths.fit(xtrain_world_deaths,ytrain_world_deaths)
lmodel_world_deaths_test=lmodel_world_deaths.predict(xtest_world_deaths)
lmodel_world_deaths_predict=lmodel_world_deaths.predict(prediction_days)
print('MAE:', metrics.mean_absolute_error(lmodel_world_deaths_test, ytest_world_deaths))
print('MSE:',metrics.mean_squared_error(lmodel_world_deaths_test,ytest_world_deaths))
print('R2 :',metrics.r2_score(lmodel_world_deaths_test,ytest_world_deaths))
print('Training score:',lmodel_world_deaths.score(xtrain_world_deaths,ytrain_world_deaths))
print('Testing score:',lmodel_world_deaths.score(xtest_world_deaths,ytest_world_deaths))
print('Co-efficient:',lmodel_world_deaths.coef_)
print('Intercept:',lmodel_world_deaths.intercept_)

#Graph for Linear Predicted deaths in World

plt.figure(figsize=(12, 8))
plt.plot(days,world_deaths)
plt.plot(prediction_days,lmodel_world_deaths_predict,linestyle='dashed')
plt.title('Predicted Coronavirus deaths Cases Over Time in World', size=30)
plt.xlabel('Days Since 1/22/2020', size=20)
plt.ylabel('No.of Cases(in Croces)', size=20)
plt.legend(['Confirmed Cases', 'Linear Regression Predictions'])
plt.xticks(size=15)
plt.show()

lmodel_world_deaths_predict = lmodel_world_deaths_predict.reshape(1,-1)[0]
df_world_deaths_linear_predict = pd.DataFrame({'Date': prediction_dates[-(days_in_future):], 'Linear Regression Predicted # of deaths Cases Worldwide': np.round(lmodel_world_deaths_predict[-(days_in_future):])})
df_world_deaths_linear_predict

# India
lmodel_ind_deaths=LinearRegression()
lmodel_ind_deaths.fit(xtrain_ind_deaths,ytrain_ind_deaths)
lmodel_ind_deaths_test=lmodel_ind_deaths.predict(xtest_ind_deaths)
lmodel_ind_deaths_predict=lmodel_ind_deaths.predict(prediction_days)
print('MAE:', metrics.mean_absolute_error(lmodel_ind_deaths_test, ytest_ind_deaths))
print('MSE:',metrics.mean_squared_error(lmodel_ind_deaths_test,ytest_ind_deaths))
print('R2 :',metrics.r2_score(lmodel_ind_deaths_test,ytest_ind_deaths))
print('Training score:',lmodel_ind_deaths.score(xtrain_ind_deaths,ytrain_ind_deaths))
print('Testing score:',lmodel_ind_deaths.score(xtest_ind_deaths,ytest_ind_deaths))
print('Co-efficient:',lmodel_ind_deaths.coef_)
print('Intercept:',lmodel_ind_deaths.intercept_)

#Graph for Linear Predicted deaths in India

plt.figure(figsize=(12, 8))
plt.plot(days,India_recovered)
plt.plot(prediction_days,lmodel_ind_recovered_predict,linestyle='dashed')
plt.title('Predicted Coronavirus Recovered Cases Over Time in India', size=30)
plt.xlabel('Days Since 1/22/2020', size=20)
plt.ylabel('No.of Cases(in Croces)', size=20)
plt.legend(['Confirmed Cases', 'Linear Regression Predictions'])
plt.xticks(size=15)
plt.show()

#Prediction in India
lmodel_ind_deaths_predict = lmodel_ind_deaths_predict.reshape(1,-1)[0]
df_ind_deaths_linear_predict = pd.DataFrame({'Date': prediction_dates[-(days_in_future):], 'Linear Regression Predicted # of deaths Cases in India': np.round(lmodel_ind_deaths_predict[-(days_in_future):])})
df_ind_deaths_linear_predict

# Polynomial Regression

#India

error_deaths=[]
for i in range(0,20):
  pol=PolynomialFeatures(degree=i)
  pol_world_deaths=pol.fit_transform(xtrain_world_deaths)
  pol_world_deaths_test=pol.fit_transform(xtest_world_deaths)
  lmodel=LinearRegression()
  lmodel.fit(pol_world_deaths,ytrain_world_deaths)
  pol_world_deaths_predict=lmodel.predict(pol_world_deaths_test)
  e=metrics.mean_absolute_error(pol_world_deaths_predict,ytest_world_deaths)
  error_deaths.append(e)
plt.plot(range(0,20),error_deaths)
plt.show()

pol=PolynomialFeatures(degree=3)
pol_world_deaths=pol.fit_transform(xtrain_world_deaths)
pol_world_deaths_test=pol.fit_transform(xtest_world_deaths)
pol_world_deaths_predict_days=pol.fit_transform(prediction_days)
pmodel=LinearRegression()
pmodel.fit(pol_world_deaths,ytrain_world_deaths)
pol_world_deaths_predict=pmodel.predict(pol_world_deaths_test)
pol_world_deaths_days=pmodel.predict(pol_world_deaths_predict_days)
print('MAE:', metrics.mean_absolute_error(pol_world_deaths_predict, ytest_world_deaths))
print('MSE:',metrics.mean_squared_error(pol_world_deaths_predict,ytest_world_deaths))
print('R2 :',metrics.r2_score(pol_world_deaths_predict,ytest_world_deaths))
print('Training score:',pmodel.score(pol_world_deaths,ytrain_world_deaths))
print('Testing score:',pmodel.score(pol_world_deaths_test,ytest_world_deaths))
print('Co-efficient:',pmodel.coef_)
print('Intercept:',pmodel.intercept_)

#Graph for Polynomial Predicted deaths in World

plt.figure(figsize=(12, 8))
plt.plot(days,world_deaths)
plt.plot(prediction_days,pol_world_deaths_days,linestyle='dashed')
plt.title('Polynomial Predicted Coronavirus deaths Cases Over Time in World', size=30)
plt.xlabel('Days Since 1/22/2020', size=20)
plt.ylabel('No.of Cases(in Croces)', size=20)
plt.legend(['deaths Cases', 'Polynomial Regression Predictions'])
plt.xticks(size=15)
plt.show()

pol_world_deaths_days = pol_world_deaths_days.reshape(1,-1)[0]
df_world_deaths_poly_predict = pd.DataFrame({'Date': prediction_dates[-(days_in_future):], 'Polynomial Regression Predicted # of deaths Cases Worldwide': np.round(pol_world_deaths_days[-(days_in_future):])})
df_world_deaths_poly_predict

#India

error_deaths=[]
for i in range(0,20):
  pol=PolynomialFeatures(degree=i)
  pol_ind_deaths=pol.fit_transform(xtrain_ind_deaths)
  pol_ind_deaths_test=pol.fit_transform(xtest_ind_deaths)
  lmodel=LinearRegression()
  lmodel.fit(pol_ind_deaths,ytrain_ind_deaths)
  pol_ind_deaths_predict=lmodel.predict(pol_ind_deaths_test)
  e=metrics.mean_absolute_error(pol_ind_deaths_predict,ytest_ind_deaths)
  error_deaths.append(e)
plt.plot(range(0,20),error_deaths)
plt.show()

pol=PolynomialFeatures(degree=3)
pol_ind_deaths=pol.fit_transform(xtrain_ind_deaths)
pol_ind_deaths_test=pol.fit_transform(xtest_ind_deaths)
pol_ind_deaths_predict_days=pol.fit_transform(prediction_days)
pmodel=LinearRegression()
pmodel.fit(pol_ind_deaths,ytrain_ind_deaths)
pol_ind_deaths_predict=pmodel.predict(pol_ind_deaths_test)
pol_ind_deaths_days=pmodel.predict(pol_ind_deaths_predict_days)
print('MAE:', metrics.mean_absolute_error(pol_ind_deaths_predict, ytest_ind_deaths))
print('MSE:',metrics.mean_squared_error(pol_ind_deaths_predict,ytest_ind_deaths))
print('R2 :',metrics.r2_score(pol_ind_deaths_predict,ytest_ind_deaths))
print('Training score:',pmodel.score(pol_ind_deaths,ytrain_ind_deaths))
print('Testing score:',pmodel.score(pol_ind_deaths_test,ytest_ind_deaths))
print('Co-efficient:',pmodel.coef_)
print('Intercept:',pmodel.intercept_)

#Graph for Polynomial Predicted deaths in India

plt.figure(figsize=(12, 8))
plt.plot(days,India_deaths)
plt.plot(prediction_days,pol_ind_deaths_days,linestyle='dashed')
plt.title('Polynomial Predicted Coronavirus deaths Cases Over Time in India', size=30)
plt.xlabel('Days Since 1/22/2020', size=20)
plt.ylabel('No.of Cases(in Lakhs)', size=20)
plt.legend(['deaths Cases', 'Polynomial Regression Predictions'])
plt.xticks(size=15)
plt.show()

pol_ind_deaths_days = pol_ind_deaths_days.reshape(1,-1)[0]
df_ind_deaths_poly_predict = pd.DataFrame({'Date': prediction_dates[-(days_in_future):], 'Polynomial Regression Predicted # of deaths Cases India': np.round(pol_ind_deaths_days[-(days_in_future):])})
df_ind_deaths_poly_predict

#Bayesian Ridge

#To get Best Parameters

reg_world_deaths=BayesianRidge()
reg_world_deaths.fit(xtrain_world_deaths,ytrain_world_deaths)
print(reg_world_deaths.get_params)

#World

reg_world_deaths=BayesianRidge(alpha_1=1e-06, alpha_2=1e-06, alpha_init=None,
              compute_score=False, copy_X=True, fit_intercept=True,
              lambda_1=1e-06, lambda_2=1e-06, lambda_init=None, n_iter=300,
              normalize=False, tol=0.001, verbose=False)
reg_world_deaths.fit(xtrain_world_deaths,ytrain_world_deaths)
reg_world_deaths_test = reg_world_deaths.predict(xtest_world_deaths)
reg_world_deaths_predict_days = reg_world_deaths.predict(prediction_days)
print('MAE:', metrics.mean_absolute_error(reg_world_deaths_test, ytest_world_deaths))
print('MSE:',metrics.mean_squared_error(reg_world_deaths_test, ytest_world_deaths))
print('R2 :',metrics.r2_score(reg_world_deaths_test, ytest_world_deaths))
print('Training score:',reg_world_deaths.score(xtrain_world_deaths,ytrain_world_deaths))
print('Testing score:',reg_world_deaths.score(xtest_world_deaths,ytest_world_deaths))

#Graph for Bayesian Predicted deaths in World

plt.figure(figsize=(12, 8))
plt.plot(days,world_deaths)
plt.plot(prediction_days,reg_world_deaths_predict_days,linestyle='dashed')
plt.title('Predicted Coronavirus deaths Cases Over Time in World', size=30)
plt.xlabel('Days Since 1/22/2020', size=20)
plt.ylabel('No.of Cases(in Croces)', size=20)
plt.legend(['deaths Cases', 'Bayesian Ridge Predictions'])
plt.xticks(size=15)
plt.show()

reg_world_deaths_predict_days = reg_world_deaths_predict_days.reshape(1,-1)[0]
df_world_deaths_reg_predict = pd.DataFrame({'Date': prediction_dates[-(days_in_future):], 'Bayesian Ridge Predicted # of deaths Cases Worldwide': np.round(reg_world_deaths_predict_days[-(days_in_future):])})
df_world_deaths_reg_predict

#To get Parameters

reg_ind_deaths=BayesianRidge()
reg_ind_deaths.fit(xtrain_ind_deaths,ytrain_ind_deaths)
print(reg_ind_deaths.get_params)

#India

reg_ind_deaths=BayesianRidge(alpha_1=1e-06, alpha_2=1e-06, alpha_init=None,
              compute_score=False, copy_X=True, fit_intercept=True,
              lambda_1=1e-06, lambda_2=1e-06, lambda_init=None, n_iter=300,
              normalize=False, tol=0.001, verbose=False)
reg_ind_deaths.fit(xtrain_ind_deaths,ytrain_ind_deaths)
reg_ind_deaths_test = reg_ind_deaths.predict(xtest_ind_deaths)
reg_ind_deaths_predict_days = reg_ind_deaths.predict(prediction_days)
print('MAE:', metrics.mean_absolute_error(reg_ind_deaths_test, ytest_ind_deaths))
print('MSE:',metrics.mean_squared_error(reg_ind_deaths_test, ytest_ind_deaths))
print('R2 :',metrics.r2_score(reg_ind_deaths_test, ytest_ind_deaths))
print('Training score:',reg_ind_deaths.score(xtrain_ind_deaths,ytrain_ind_deaths))
print('Testing score:',reg_ind_deaths.score(xtest_ind_deaths,ytest_ind_deaths))

#Graph for Bayesian Predicted deaths in India

plt.figure(figsize=(12, 8))
plt.plot(days,India_deaths)
plt.plot(prediction_days,reg_ind_deaths_predict_days,linestyle='dashed')
plt.title('Predicted Coronavirus deaths Cases Over Time in World', size=30)
plt.xlabel('Days Since 1/22/2020', size=20)
plt.ylabel('No.of Cases(in Croces)', size=20)
plt.legend(['deaths Cases', 'Bayesian Ridge Predictions'])
plt.xticks(size=15)
plt.show()

reg_ind_deaths_predict_days = reg_ind_deaths_predict_days.reshape(1,-1)[0]
df_ind_deaths_reg_predict = pd.DataFrame({'Date': prediction_dates[-(days_in_future):], 'Bayesian Ridge Predicted # of deaths Cases India': np.round(reg_ind_deaths_predict_days[-(days_in_future):])})
df_ind_deaths_reg_predict

#SVR

#World

svm_world_deaths = SVR(shrinking=True, kernel='poly',gamma=0.01, epsilon=1,degree=3, C=0.1)
svm_world_deaths.fit(xtrain_world_deaths, ytrain_world_deaths)
svm_world_deaths_predict = svm_world_deaths.predict(xtest_world_deaths)
svm_world_deaths_predict_days=svm_world_deaths.predict(prediction_days)
print('MAE:', metrics.mean_absolute_error(svm_world_deaths_predict, ytest_world_deaths))
print('MSE:',metrics.mean_squared_error(svm_world_deaths_predict, ytest_world_deaths))
print('R2 :',metrics.r2_score(svm_world_deaths_predict, ytest_world_deaths))
print('Training score:',svm_world_deaths.score(xtrain_world_deaths,ytrain_world_deaths))
print('Testing score:',svm_world_deaths.score(xtest_world_deaths,ytest_world_deaths))

#Graph for SVM Predicted deaths  in World

plt.figure(figsize=(12, 8))
plt.plot(days,world_deaths)
plt.plot(prediction_days,svm_world_deaths_predict_days,linestyle='dashed')
plt.title('Predicted Coronavirus deaths Cases Over Time in World', size=30)
plt.xlabel('Days Since 1/22/2020', size=20)
plt.ylabel('No.of Cases(in Croces)', size=20)
plt.legend(['deaths Cases', 'SVM Predictions'])
plt.xticks(size=15)
plt.show()

svm_world_deaths_predict_days = svm_world_deaths_predict_days.reshape(1,-1)[0]
df_world_deaths_svm_predict = pd.DataFrame({'Date': prediction_dates[-(days_in_future):], 'SVM Predicted # of deaths Cases Worldwide': np.round(svm_world_deaths_predict_days[-(days_in_future):])})
df_world_deaths_svm_predict

#India

svm_ind_deaths = SVR(shrinking=True, kernel='poly',gamma=0.01, epsilon=1,degree=3, C=0.1)
svm_ind_deaths.fit(xtrain_ind_deaths, ytrain_ind_deaths)
svm_ind_deaths_predict = svm_ind_deaths.predict(xtest_ind_deaths)
svm_ind_deaths_predict_days=svm_ind_deaths.predict(prediction_days)
print('MAE:', metrics.mean_absolute_error(svm_ind_deaths_predict, ytest_ind_deaths))
print('MSE:',metrics.mean_squared_error(svm_ind_deaths_predict, ytest_ind_deaths))
print('R2 :',metrics.r2_score(svm_ind_deaths_predict, ytest_ind_deaths))
print('Training score:',svm_ind_deaths.score(xtrain_ind_deaths,ytrain_ind_deaths))
print('Testing score:',svm_ind_deaths.score(xtest_ind_deaths,ytest_ind_deaths))

#Graph for SVM Predicted deaths in India

plt.figure(figsize=(12, 8))
plt.plot(days,India_deaths)
plt.plot(prediction_days,svm_ind_deaths_predict_days,linestyle='dashed')
plt.title('Predicted Coronavirus deaths Cases Over Time in India', size=30)
plt.xlabel('Days Since 1/22/2020', size=20)
plt.ylabel('No.of Cases(in Croces)', size=20)
plt.legend(['deaths Cases', 'SVM Predictions'])
plt.xticks(size=15)
plt.show()

svm_ind_deaths_predict_days = svm_ind_deaths_predict_days.reshape(1,-1)[0]
df_ind_deaths_svm1_predict = pd.DataFrame({'Date': prediction_dates[-(days_in_future):], 'SVM Predicted # of deaths Cases India': np.round(svm_ind_deaths_predict_days[-(days_in_future):])})
df_ind_deaths_svm1_predict

