# -*- coding: utf-8 -*-
"""Recovered.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AKb3QAfXyncl8Tf9C2j7teUJl3-g2WJY
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import datetime
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import BayesianRidge
from sklearn.svm import SVR
from sklearn import metrics
from sklearn.model_selection import train_test_split

"""**Datasets and Preprocessing**

#### Analysis of recovered cases in World and India
"""

#Recovered Cases in World and India

world_covid_recovered=pd.read_csv('/content/time_series_covid19_recovered_global1.csv')
world_covid_recovered.drop(columns=['Province/State','Lat','Long'],inplace=True)
India_covid_recovered=world_covid_recovered[world_covid_recovered['Country/Region']=='India']
print(India_covid_recovered)
world_covid_recovered

#columns

cols=world_covid_recovered.keys()
cols=cols[1:]
cols

#Access all No.of Recovered Cases daily in World

world_recovered=[]
cov_recovered=world_covid_recovered.values
for i in range(1,len(cols)+1):
  world_recovered.append(cov_recovered[:,i].sum())
world_recovered=np.array(world_recovered).reshape(-1,1)
world_recovered

#Access all Recovered Cases Daily in India

India_recovered=[]
ind_recovered=world_covid_recovered[world_covid_recovered['Country/Region']=='India'].values
for i in range(1,len(cols)+1):
  India_recovered.append(ind_recovered[:,i].sum())
India_recovered=np.array(India_recovered).reshape(-1,1)
India_recovered

#Days

days = np.array([i for i in range(len(world_recovered))]).reshape(-1, 1)
days

#Converting Dates

dates=pd.to_datetime(cols)
dates

"""**Graphs**"""

#Graph for Recovered Cases in World

plt.figure(figsize=(12, 8))
plt.plot(dates,world_recovered)
plt.title('Coronavirus Recovered Cases Over Time in World', size=30)
plt.xlabel('Days Since 1/22/2020', size=20)
plt.ylabel('No.of Recovered Cases(in million)', size=20)
plt.xticks(size=15)
plt.show()

#Graph for Recovered Cases in India

plt.figure(figsize=(12, 8))
plt.plot(dates,India_recovered)
plt.title('Coronavirus Recovered Cases Over Time in India', size=30)
plt.xlabel('Days Since 1/22/2020', size=20)
plt.ylabel('No.of Cases', size=20)
plt.xticks(size=15)
plt.show()

"""#Prediction"""

days_in_future = 15
prediction_days = np.array([i for i in range(len(days)+days_in_future)]).reshape(-1, 1)
start = '1/22/2020'
start_date = datetime.datetime.strptime(start, '%m/%d/%Y')
prediction_dates = []
for i in range(len(prediction_days)):
    prediction_dates.append((start_date + datetime.timedelta(days=i)).strftime('%m/%d/%Y'))
prediction_dates

xtrain_world_recovered,xtest_world_recovered,ytrain_world_recovered,ytest_world_recovered=train_test_split(days,world_recovered,test_size=0.35)
xtrain_ind_recovered,xtest_ind_recovered,ytrain_ind_recovered,ytest_ind_recovered=train_test_split(days,India_recovered,test_size=0.35)

#Linear Regression

# World
lmodel_world_recovered=LinearRegression()
lmodel_world_recovered.fit(xtrain_world_recovered,ytrain_world_recovered)
lmodel_world_recovered_test=lmodel_world_recovered.predict(xtest_world_recovered)
lmodel_world_recovered_predict=lmodel_world_recovered.predict(prediction_days)
print('MAE:', metrics.mean_absolute_error(lmodel_world_recovered_test, ytest_world_recovered))
print('MSE:',metrics.mean_squared_error(lmodel_world_recovered_test,ytest_world_recovered))
print('R2 :',metrics.r2_score(lmodel_world_recovered_test,ytest_world_recovered))
print('Training score:',lmodel_world_recovered.score(xtrain_world_recovered,ytrain_world_recovered))
print('Testing score:',lmodel_world_recovered.score(xtest_world_recovered,ytest_world_recovered))
print('Co-efficient:',lmodel_world_recovered.coef_)
print('Intercept:',lmodel_world_recovered.intercept_)

#Graph for Linear Predicted Recovered Cases in World

plt.figure(figsize=(12, 8))
plt.plot(days,world_recovered)
plt.plot(prediction_days,lmodel_world_recovered_predict,linestyle='dashed')
plt.title('Predicted Coronavirus recovered Cases Over Time in World', size=30)
plt.xlabel('Days Since 1/22/2020', size=20)
plt.ylabel('No.of Cases(in Croces)', size=20)
plt.legend(['Confirmed Cases', 'Linear Regression Predictions'])
plt.xticks(size=15)
plt.show()

lmodel_world_recovered_predict = lmodel_world_recovered_predict.reshape(1,-1)[0]
df_world_recovered_linear_predict = pd.DataFrame({'Date': prediction_dates[-(days_in_future):], 'Linear Regression Predicted # of Recovered Cases Worldwide': np.round(lmodel_world_recovered_predict[-(days_in_future):])})
df_world_recovered_linear_predict

# India
lmodel_ind_recovered=LinearRegression()
lmodel_ind_recovered.fit(xtrain_ind_recovered,ytrain_ind_recovered)
lmodel_ind_recovered_test=lmodel_ind_recovered.predict(xtest_ind_recovered)
lmodel_ind_recovered_predict=lmodel_ind_recovered.predict(prediction_days)
print('MAE:', metrics.mean_absolute_error(lmodel_ind_recovered_test, ytest_ind_recovered))
print('MSE:',metrics.mean_squared_error(lmodel_ind_recovered_test,ytest_ind_recovered))
print('R2 :',metrics.r2_score(lmodel_ind_recovered_test,ytest_ind_recovered))
print('Training score:',lmodel_ind_recovered.score(xtrain_ind_recovered,ytrain_ind_recovered))
print('Testing score:',lmodel_ind_recovered.score(xtest_ind_recovered,ytest_ind_recovered))
print('Co-efficient:',lmodel_ind_recovered.coef_)
print('Intercept:',lmodel_ind_recovered.intercept_)

#Graph for Linear Predicted recoevred Cases in India

plt.figure(figsize=(12, 8))
plt.plot(days,India_recovered)
plt.plot(prediction_days,lmodel_ind_recovered_predict,linestyle='dashed')
plt.title('Predicted Coronavirus Recovered Cases Over Time in India', size=30)
plt.xlabel('Days Since 1/22/2020', size=20)
plt.ylabel('No.of Cases(in Croces)', size=20)
plt.legend(['Confirmed Cases', 'Linear Regression Predictions'])
plt.xticks(size=15)
plt.show()

#Prediction in India
lmodel_ind_recovered_predict = lmodel_ind_recovered_predict.reshape(1,-1)[0]
df_ind_recovered_linear_predict = pd.DataFrame({'Date': prediction_dates[-(days_in_future):], 'Linear Regression Predicted # of recovered Cases in India': np.round(lmodel_ind_recovered_predict[-(days_in_future):])})
df_ind_recovered_linear_predict

#Polynomial Regression
#Best degreee = 3

#World

error_recovered=[]
for i in range(0,20):
  pol=PolynomialFeatures(degree=i)
  pol_world_recovered=pol.fit_transform(xtrain_world_recovered)
  pol_world_recovered_test=pol.fit_transform(xtest_world_recovered)
  lmodel=LinearRegression()
  lmodel.fit(pol_world_recovered,ytrain_world_recovered)
  pol_world_recovered_predict=lmodel.predict(pol_world_recovered_test)
  e=metrics.mean_absolute_error(pol_world_recovered_predict,ytest_world_recovered)
  error_recovered.append(e)
plt.plot(range(0,20),error_recovered)
plt.show()

pol=PolynomialFeatures(degree=3)
pol_world_recovered=pol.fit_transform(xtrain_world_recovered)
pol_world_recovered_test=pol.fit_transform(xtest_world_recovered)
pol_world_recovered_predict_days=pol.fit_transform(prediction_days)
pmodel=LinearRegression()
pmodel.fit(pol_world_recovered,ytrain_world_recovered)
pol_world_recovered_predict=pmodel.predict(pol_world_recovered_test)
pol_world_recovered_days=pmodel.predict(pol_world_recovered_predict_days)
print('MAE:', metrics.mean_absolute_error(pol_world_recovered_predict, ytest_world_recovered))
print('MSE:',metrics.mean_squared_error(pol_world_recovered_predict,ytest_world_recovered))
print('R2 :',metrics.r2_score(pol_world_recovered_predict,ytest_world_recovered))
print('Training score:',pmodel.score(pol_world_recovered,ytrain_world_recovered))
print('Testing score:',pmodel.score(pol_world_recovered_test,ytest_world_recovered))
print('Co-efficient:',pmodel.coef_)
print('Intercept:',pmodel.intercept_)

#Graph for Polynomial Predicted recovered Cases in World

plt.figure(figsize=(12, 8))
plt.plot(days,world_recovered)
plt.plot(prediction_days,pol_world_recovered_days,linestyle='dashed')
plt.title('Polynomial Predicted Coronavirus recovered Cases Over Time in World', size=30)
plt.xlabel('Days Since 1/22/2020', size=20)
plt.ylabel('No.of Cases(in Croces)', size=20)
plt.legend(['recovered Cases', 'Polynomial Regression Predictions'])
plt.xticks(size=15)
plt.show()

pol_world_recovered_days = pol_world_recovered_days.reshape(1,-1)[0]
df_world_recovered_poly_predict = pd.DataFrame({'Date': prediction_dates[-(days_in_future):], 'Polynomial Regression Predicted # of recovered Cases Worldwide': np.round(pol_world_recovered_days[-(days_in_future):])})
df_world_recovered_poly_predict

#India

error_recovered=[]
for i in range(0,20):
  pol=PolynomialFeatures(degree=i)
  pol_ind_recovered=pol.fit_transform(xtrain_ind_recovered)
  pol_ind_recovered_test=pol.fit_transform(xtest_ind_recovered)
  lmodel=LinearRegression()
  lmodel.fit(pol_ind_recovered,ytrain_ind_recovered)
  pol_ind_recovered_predict=lmodel.predict(pol_ind_recovered_test)
  e=metrics.mean_absolute_error(pol_ind_recovered_predict,ytest_ind_recovered)
  error_recovered.append(e)
plt.plot(range(0,20),error_recovered)
plt.show()

#Best Degree = 4

pol=PolynomialFeatures(degree=4)
pol_ind_recovered=pol.fit_transform(xtrain_ind_recovered)
pol_ind_recovered_test=pol.fit_transform(xtest_ind_recovered)
pol_ind_recovered_predict_days=pol.fit_transform(prediction_days)
pmodel=LinearRegression()
pmodel.fit(pol_ind_recovered,ytrain_ind_recovered)
pol_ind_recovered_predict=pmodel.predict(pol_ind_recovered_test)
pol_ind_recovered_days=pmodel.predict(pol_ind_recovered_predict_days)
print('MAE:', metrics.mean_absolute_error(pol_ind_recovered_predict, ytest_ind_recovered))
print('MSE:',metrics.mean_squared_error(pol_ind_recovered_predict,ytest_ind_recovered))
print('R2 :',metrics.r2_score(pol_ind_recovered_predict,ytest_ind_recovered))
print('Training score:',pmodel.score(pol_ind_recovered,ytrain_ind_recovered))
print('Testing score:',pmodel.score(pol_ind_recovered_test,ytest_ind_recovered))
print('Co-efficient:',pmodel.coef_)
print('Intercept:',pmodel.intercept_)

#Graph for Polynomial Predicted recovered Cases in India

plt.figure(figsize=(12, 8))
plt.plot(days,India_recovered)
plt.plot(prediction_days,pol_ind_recovered_days,linestyle='dashed')
plt.title('Polynomial Predicted Coronavirus recovered Cases Over Time in India', size=30)
plt.xlabel('Days Since 1/22/2020', size=20)
plt.ylabel('No.of Cases(in Lakhs)', size=20)
plt.legend(['recovered Cases', 'Polynomial Regression Predictions'])
plt.xticks(size=15)
plt.show()

pol_ind_recovered_days = pol_ind_recovered_days.reshape(1,-1)[0]
df_ind_recovered_poly_predict = pd.DataFrame({'Date': prediction_dates[-(days_in_future):], 'Polynomial Regression Predicted # of recovered Cases India': np.round(pol_ind_recovered_days[-(days_in_future):])})
df_ind_recovered_poly_predict

#Bayesian Ridge

#To get Best Parameters

reg_world_confirm=BayesianRidge()
reg_world_confirm.fit(xtrain_world_recovered,ytrain_world_recovered)
print(reg_world_confirm.get_params)

#World

reg_world_recovered=BayesianRidge(alpha_1=1e-06, alpha_2=1e-06, alpha_init=None,
              compute_score=False, copy_X=True, fit_intercept=True,
              lambda_1=1e-06, lambda_2=1e-06, lambda_init=None, n_iter=300,
              normalize=False, tol=0.001, verbose=False)
reg_world_recovered.fit(xtrain_world_recovered,ytrain_world_recovered)
reg_world_recovered_test = reg_world_recovered.predict(xtest_world_recovered)
reg_world_recovered_predict_days = reg_world_recovered.predict(prediction_days)
print('MAE:', metrics.mean_absolute_error(reg_world_recovered_test, ytest_world_recovered))
print('MSE:',metrics.mean_squared_error(reg_world_recovered_test, ytest_world_recovered))
print('R2 :',metrics.r2_score(reg_world_recovered_test, ytest_world_recovered))
print('Training score:',reg_world_recovered.score(xtrain_world_recovered,ytrain_world_recovered))
print('Testing score:',reg_world_recovered.score(xtest_world_recovered,ytest_world_recovered))

#Graph for Bayesian Predicted recovered Cases in World

plt.figure(figsize=(12, 8))
plt.plot(days,world_recovered)
plt.plot(prediction_days,reg_world_recovered_predict_days,linestyle='dashed')
plt.title('Predicted Coronavirus recovered Cases Over Time in World', size=30)
plt.xlabel('Days Since 1/22/2020', size=20)
plt.ylabel('No.of Cases(in Croces)', size=20)
plt.legend(['Recovered Cases', 'Bayesian Ridge Predictions'])
plt.xticks(size=15)
plt.show()

reg_world_recovered_predict_days = reg_world_recovered_predict_days.reshape(1,-1)[0]
df_world_recovered_reg_predict = pd.DataFrame({'Date': prediction_dates[-(days_in_future):], 'Bayesian Ridge Predicted # of recovered Cases Worldwide': np.round(reg_world_recovered_predict_days[-(days_in_future):])})
df_world_recovered_reg_predict

#To get Parameters

reg_ind_recover=BayesianRidge()
reg_ind_recover.fit(xtrain_ind_recovered,ytrain_ind_recovered)
print(reg_ind_recover.get_params)

#India

reg_ind_recovered=BayesianRidge(alpha_1=1e-06, alpha_2=1e-06, alpha_init=None,
              compute_score=False, copy_X=True, fit_intercept=True,
              lambda_1=1e-06, lambda_2=1e-06, lambda_init=None, n_iter=300,
              normalize=False, tol=0.001, verbose=False)
reg_ind_recovered.fit(xtrain_ind_recovered,ytrain_ind_recovered)
reg_ind_recovered_test = reg_ind_recovered.predict(xtest_ind_recovered)
reg_ind_recovered_predict_days = reg_ind_recovered.predict(prediction_days)
print('MAE:', metrics.mean_absolute_error(reg_ind_recovered_test, ytest_ind_recovered))
print('MSE:',metrics.mean_squared_error(reg_ind_recovered_test, ytest_ind_recovered))
print('R2 :',metrics.r2_score(reg_ind_recovered_test, ytest_ind_recovered))
print('Training score:',reg_ind_recovered.score(xtrain_ind_recovered,ytrain_ind_recovered))
print('Testing score:',reg_ind_recovered.score(xtest_ind_recovered,ytest_ind_recovered))

#Graph for Bayesian Predicted recovered Cases in India

plt.figure(figsize=(12, 8))
plt.plot(days,India_recovered)
plt.plot(prediction_days,reg_ind_recovered_predict_days,linestyle='dashed')
plt.title('Predicted Coronavirus recovered Cases Over Time in World', size=30)
plt.xlabel('Days Since 1/22/2020', size=20)
plt.ylabel('No.of Cases(in Croces)', size=20)
plt.legend(['recovered Cases', 'Bayesian Ridge Predictions'])
plt.xticks(size=15)
plt.show()

reg_ind_recovered_predict_days = reg_ind_recovered_predict_days.reshape(1,-1)[0]
df_ind_recovered_reg_predict = pd.DataFrame({'Date': prediction_dates[-(days_in_future):], 'Bayesian Ridge Predicted # of recovered Cases India': np.round(reg_ind_recovered_predict_days[-(days_in_future):])})
df_ind_recovered_reg_predict

#SVR

#World

svm_world_recovered = SVR(shrinking=True, kernel='poly',gamma=0.01, epsilon=1,degree=3, C=0.1)
svm_world_recovered.fit(xtrain_world_recovered, ytrain_world_recovered)
svm_world_recovered_predict = svm_world_recovered.predict(xtest_world_recovered)
svm_world_recovered_predict_days=svm_world_recovered.predict(prediction_days)
print('MAE:', metrics.mean_absolute_error(svm_world_recovered_predict, ytest_world_recovered))
print('MSE:',metrics.mean_squared_error(svm_world_recovered_predict, ytest_world_recovered))
print('R2 :',metrics.r2_score(svm_world_recovered_predict, ytest_world_recovered))
print('Training score:',svm_world_recovered.score(xtrain_world_recovered,ytrain_world_recovered))
print('Testing score:',svm_world_recovered.score(xtest_world_recovered,ytest_world_recovered))

#Graph for SVM Predicted recovered Cases in World

plt.figure(figsize=(12, 8))
plt.plot(days,world_recovered)
plt.plot(prediction_days,svm_world_recovered_predict_days,linestyle='dashed')
plt.title('Predicted Coronavirus recovered Cases Over Time in World', size=30)
plt.xlabel('Days Since 1/22/2020', size=20)
plt.ylabel('No.of Cases(in Croces)', size=20)
plt.legend(['Recovered Cases', 'SVM Predictions'])
plt.xticks(size=15)
plt.show()

svm_world_recovered_predict_days = svm_world_recovered_predict_days.reshape(1,-1)[0]
df_world_recovered_svm_predict = pd.DataFrame({'Date': prediction_dates[-(days_in_future):], 'SVM Predicted # of recovered Cases Worldwide': np.round(svm_world_recovered_predict_days[-(days_in_future):])})
df_world_recovered_svm_predict

#India

svm_ind_recovered = SVR(shrinking=True, kernel='poly',gamma=0.01, epsilon=1,degree=3, C=0.1)
svm_ind_recovered.fit(xtrain_ind_recovered, ytrain_ind_recovered)
svm_ind_recovered_predict = svm_ind_recovered.predict(xtest_ind_recovered)
svm_ind_recovered_predict_days=svm_ind_recovered.predict(prediction_days)
print('MAE:', metrics.mean_absolute_error(svm_ind_recovered_predict, ytest_ind_recovered))
print('MSE:',metrics.mean_squared_error(svm_ind_recovered_predict, ytest_ind_recovered))
print('R2 :',metrics.r2_score(svm_ind_recovered_predict, ytest_ind_recovered))
print('Training score:',reg_ind_recovered.score(xtrain_ind_recovered,ytrain_ind_recovered))
print('Testing score:',reg_ind_recovered.score(xtest_ind_recovered,ytest_ind_recovered))

#Graph for SVM Predicted recovered Cases in India

plt.figure(figsize=(12, 8))
plt.plot(days,India_recovered)
plt.plot(prediction_days,svm_ind_recovered_predict_days,linestyle='dashed')
plt.title('Predicted Coronavirus recovered Cases Over Time in India', size=30)
plt.xlabel('Days Since 1/22/2020', size=20)
plt.ylabel('No.of Cases(in Croces)', size=20)
plt.legend(['recovered Cases', 'SVM Predictions'])
plt.xticks(size=15)
plt.show()

svm_ind_recovered_predict_days = svm_ind_recovered_predict_days.reshape(1,-1)[0]
df_ind_recovered_svm1_predict = pd.DataFrame({'Date': prediction_dates[-(days_in_future):], 'SVM Predicted # of recovered Cases India': np.round(svm_ind_recovered_predict_days[-(days_in_future):])})
df_ind_recovered_svm1_predict



"""**Recovery Rate**"""

#Confirmed Cases in World and India

world_covid_confirmed=pd.read_csv('/content/time_series_covid19_confirmed_global1.csv')
world_covid_confirmed.drop(columns=['Province/State','Lat','Long'],inplace=True)
India_covid_confirmed=world_covid_confirmed[world_covid_confirmed['Country/Region']=='India']
print(India_covid_confirmed)
world_covid_confirmed

#Access all No.of Confirmed Cases daily in World

world_confirmed=[]
cov_confirmed=world_covid_confirmed.values
for i in range(1,len(cols)+1):
  world_confirmed.append(cov_confirmed[:,i].sum())
world_confirmed=np.array(world_confirmed).reshape(-1,1)
world_confirmed

#Access all Confirmed Cases Daily in India

India_confirmed=[]
ind_confirmed=world_covid_confirmed[world_covid_confirmed['Country/Region']=='India'].values
for i in range(1,len(cols)+1):
  India_confirmed.append(ind_confirmed[:,i].sum())
India_confirmed=np.array(India_confirmed).reshape(-1,1)
India_confirmed

# World

recovery_rate_world=[]
cov_confirm=world_covid_confirmed.values
cov_recover=world_covid_recovered.values
for i in range(1,len(days)+1):
  confirm=cov_confirm[:,i].sum()
  recover=cov_recover[:,i].sum()
  recovery_rate_world.append((recover/confirm)*100)
recovery_rate_world

#Graph for Recovery Rate in World

plt.figure(figsize=(12, 8))
plt.plot(days,recovery_rate_world)
plt.title('Recovery Rate Over Time in World', size=30)
plt.xlabel('Days Since 1/22/2020', size=20)
plt.ylabel('Recovery Rate( % )', size=20)
plt.xticks(size=15)
plt.show()

# India

recovery_rate_india=[]
cov_confirm=India_covid_confirmed.values
cov_recover=India_covid_recovered.values
for i in range(1,len(days)+1):
  confirm=cov_confirm[:,i].sum()
  recover=cov_recover[:,i].sum()
  if(confirm != 0 ):
    recovery_rate_india.append((recover/confirm)*100)
  else:
    recovery_rate_india.append(0)
recovery_rate_india

#Graph for Recovery Rate in India

plt.figure(figsize=(12, 8))
plt.plot(days,recovery_rate_india)
plt.title('Recovery Rate Over Time in India', size=30)
plt.xlabel('Days Since 1/22/2020', size=20)
plt.ylabel('Recovery Rate( % )', size=20)
plt.xticks(size=15)
plt.show()

